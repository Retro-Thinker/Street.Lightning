// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Street.Lightning.Persistence.DatabaseContext;

#nullable disable

namespace Street.Lightning.Persistence.Migrations
{
    [DbContext(typeof(StreetLightningDatabaseContext))]
    [Migration("20240419154447_Database-Init")]
    partial class DatabaseInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Street.Lightning.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Wrocław",
                            CountryId = 1,
                            DateCreated = new DateTime(2024, 4, 19, 15, 44, 46, 887, DateTimeKind.Utc).AddTicks(2660),
                            Latitude = 51.107883000000001,
                            Longitude = 17.038537999999999
                        });
                });

            modelBuilder.Entity("Street.Lightning.Domain.CityIlluminationDetails", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("IlluminationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityOfBulbs")
                        .HasColumnType("int");

                    b.HasKey("CityId", "IlluminationId");

                    b.HasIndex("IlluminationId");

                    b.ToTable("CityIlluminationDetails");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            IlluminationId = 1,
                            DateCreated = new DateTime(2024, 4, 19, 15, 44, 46, 887, DateTimeKind.Utc).AddTicks(5370),
                            QuantityOfBulbs = 250
                        });
                });

            modelBuilder.Entity("Street.Lightning.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "Poland",
                            DateCreated = new DateTime(2024, 4, 19, 15, 44, 46, 887, DateTimeKind.Utc).AddTicks(5840)
                        });
                });

            modelBuilder.Entity("Street.Lightning.Domain.Illumination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("IlluminationProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Power")
                        .HasMaxLength(100)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Illumination");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 4, 19, 15, 44, 46, 887, DateTimeKind.Utc).AddTicks(6270),
                            IlluminationProvider = "Tauron",
                            Name = "Eco Bulbs",
                            Power = 30.0
                        });
                });

            modelBuilder.Entity("Street.Lightning.Domain.City", b =>
                {
                    b.HasOne("Street.Lightning.Domain.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Street.Lightning.Domain.CityIlluminationDetails", b =>
                {
                    b.HasOne("Street.Lightning.Domain.City", "City")
                        .WithMany("CityIlluminationDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Street.Lightning.Domain.Illumination", "Illumination")
                        .WithMany("CityIlluminationDetails")
                        .HasForeignKey("IlluminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Illumination");
                });

            modelBuilder.Entity("Street.Lightning.Domain.City", b =>
                {
                    b.Navigation("CityIlluminationDetails");
                });

            modelBuilder.Entity("Street.Lightning.Domain.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Street.Lightning.Domain.Illumination", b =>
                {
                    b.Navigation("CityIlluminationDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
